A) A "arquitetura" refere-se aos atributos do sistema visíveis ao programador, o que tem influência direta na lógica de programação (comportamento funcional do sistema), ou seja, o que o programador é capaz de "manipular", dentre eles:
- Conjunto de registradores.
- "Formato" e "Repertório" de instruções.
- Modo de endereçamento.
- Tipos de dados.
Por outro lado, "organização" refere-se às unidades operacionais que implementam a arquitetura (as unidades operacionais e suas interconexões, relacionamento estrutural):
- Tecnologia de memória.
- Interfaces.
- Interconexões.
- Implementação das instruções.

B) Avaliando "registradores" e "memória", concluímos o seguinte:
- Comparando velocidade --> registradores encontram-se em vantagem quando comparados a memória, devido a afinidade com a CPU.
- Localização --> os registradores encontram-se dentro da CPU, enquanto a memória é externa à mesma.
- Uso --> Um registrador armazena informação temporariamente e a redireciona ao local desejado pela CPU. Em contraste, a memória principal
é responsável pelo armazenamento de "data" e programas que estão sendo utilizados pela CPU.
- Tipos --> memória é principalmente dividida em 2 principais tipos, "SRAM" e "DRAM", enquanto existem um variado leque de registradores 
capazes de diferentes funcionalidades, acumuladores, registradores de "data", registradores de instruções, dentre outros.


C) A diferença se dá na posição onde se encontra o byte mais significativo, em um modelo "Big Endian", o Byte mais significativo tem menor 
endereço de palavra, enquanto no "Little Endian" o byte mais significativo possui o maior endereço. Em relação ao armazenamento na memória, considerando que os dados são guardados em palavras de 32 bits (4 bytes); Big Endian: no primeiro (menor) byte fica os 8 bits mais significativos do valor, enquanto que no 4º (maior) byte estará os 8 bits menos significativos, por exemplo, ao armazenar 0x12345678 no intervalo de 0-3, 0x12 ficaria no byte 0, 0x34 no byte 1, 0x56 no byte 2, 0x78 no byte 3, já no Little Endian, seria o contrário, 0x78 ficaria no byte 0, 0x56 no byte 1, 0x34 no byte 2 e 0x12 no byte 3.
